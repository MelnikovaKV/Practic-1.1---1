import random
from utils import randbool
from utils import randcell
from utils import randcell2



# üü©üöÅüí¶üî•üå´Ô∏èüåøüå≥üíôüõíüè•üü´
# 0 - –ø–æ–ª–µ
# 1 - –≤–µ—Ä—Ç–æ–ª–µ—Ç
# 2 - —Ä–µ–∫–∞
# 3 - –æ–≥–æ–Ω—å
# 4 - –æ–±–ª–∞–∫–æ
# 5 - —Å–∞–∂–µ–Ω–µ—Ü
# 6 - –¥–µ—Ä–µ–≤–æ
# 7 - –∂–∏–∑–Ω—å
# 8 - –º–∞–≥–∞–∑–∏–Ω
# 9 - –∞–ø—Ç–µ–∫–∞
# 10 - –∫—Ä–∞–π –ø–æ–ª—è
# 13 - 
# 14 - 
# n - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–æ–µ–º–æ–≤

CELL_TYPES = "üü®üöÅüí¶üî•üå´Ô∏èüåøüå≥üíôüõíüè•üü´"

class Map:
    def __init__(self, w, h):
        self.w = w
        self.h = h
        self.cells = [[0 for i in range(w)] for j in range (h)]

    def Generate_river(self, l):
        rc = randcell(self.w-2, self.h-2) # —Ä–∞–Ω–¥–æ–º –∏—Å—Ç–æ–∫
        rx, ry = rc[0], rc[1] # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏—Å—Ç–æ–∫
        self.cells[rx][ry] = 2 # –æ—Ç–º–µ—á–∞–µ–º –Ω–∞ –∫–∞—Ä—Ç–µ –∏—Å—Ç–æ–∫ —Ä–µ–∫–∏
        if l > 1:              # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ > 1
            while l > 1:       #–ø–æ–∫–∞ –¥–ª–∏–Ω–∞ –±–æ–ª—å—à–µ 1
                rc2 = randcell2(rx, ry) #–∏—â–µ–º –∫–ª–µ—Ç–∫—É —Ä—è–¥–æ–º
                rx2, ry2 = rc2[0], rc2[1] # –Ω–∞—à–ª–∏
                if rx2 < 0 or ry2 < 0 or rx2 > self.w or ry2 > self.h: # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª–µ—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
                    rx2, ry2 = rx, ry # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∏ –Ω–∞ –ø–æ–ª–µ –Ω–µ—Ç
                    rx, ry = rx2, ry2 # –±–∞–∑–æ–≤–∞—è –∫–ª–µ—Ç–∫–∞ = –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                    l += 1 # –¥–ª–∏–Ω–∞ +1, —Ç.–∫ 1 —Ö–æ–¥ –ø–æ—Ç–µ—Ä—è–Ω –≤–ø—É—Å—Ç—É—é
                else:
                    self.cells[rx2][ry2] = 2 # –∑–∞–∫—Ä–∞—à–∏–≤–∞–µ–º, –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –µ—Å—Ç—å
                    rx, ry = rx2, ry2 # –±–∞–∑–æ–≤–∞—è –∫–ª–µ—Ç–∫–∞ = –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                    l -= 1 # –¥–ª–∏–Ω–∞ -1, —Ç.–∫ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                                    
    def Generate_forests(self, r, mxr):
        for ri in range (self.h):
            for ci in range (self.w):
                if randbool(r, mxr):
                    self.cells[ri][ci] = 5

    def print_map(self):
        a = 1
        b = 1
        print('X :', end = '')
        while a < self.w:
            if a < 10:
                print(a," ", end='')
                a += 1
            else:
                print(a,"", end='')
                a += 1
        print(a) 
        print("üü´ "*(self.w + 2))
        for row in self.cells:
            print("üü´",end="")
            for cell in row:
                #if (cell >= 0 and cell <= len(CELL_TYPES)):
                #    print(CELL_TYPES[cell],end="")
                if cell == 0:
                    print('üü®', end='')
                elif cell == 1:
                    print('üöÅ ', end='')
                elif cell == 2:
                    print('üí¶ ', end='')
                elif cell == 3:
                    print('üî• ', end='')
                elif cell == 4:
                    print('üå´Ô∏è ', end='')
                elif cell == 5:
                    print('üåø ', end='')
                elif cell == 6:
                    print('üå≥ ', end='')
                elif cell == 7:
                    print('üíô ', end='')
                elif cell == 8:
                    print('üõí ', end='')
                elif cell == 9:
                    print('üè• ', end='')
                elif cell == 10:
                    print('üü´', end='')                       
            print("üü´",end = '')
            print(b)
            b += 1
        print("üü´ " * (self.w + 2))
           
    def check_bounds(self, x, y):
        if (x < 0 or y < 0 or x >= self.h or y >= self.w):
            print("–¥–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–ª–µ –∏–≥—Ä—ã")
        return True    

    def Generate_shop(self, rx, ry):
        rc = randcell(self.w, self.h) 
        rx, ry = rc[0], rc[1] 
        self.cells[rx][ry] = 8

    def Generate_apgrade(self, x, y):
        rc = randcell(self.w, self.h) 
        rx, ry = rc[0], rc[1] 
        self.cells[rx][ry] = 9    
    
    def Add_fire(self):
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        if self.cells[cx][cy] == 6:
            self.cells[cx][cy] = 3

    def Add_tree(self):
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        if self.cells[cx][cy] == 0:
           self.cells[cx][cy] = 5

    def Generate_oldtree(self):
        rc = randcell(self.w, self.h)
        rx, ry = rc[0], rc[1]
        if self.cells[rx][ry] == 5:
            self.cells[rx][ry] = 6

    def Apdate_fires(self):
        for i in range (self.h):
            for j in range (self.w):
                cell = self.cells[i][j]
                if cell  == 3:
                    self.cells[i][j] = 0
        for i in range (20):
            self.Add_fire()            




'''print('–ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—è –¥–ª—è –∏–≥—Ä—ã, –∫–∞–∂–¥—ã–π –±–æ–ª–µ–µ 10 –µ–¥.')
field = Map(int(input('–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–æ–ª—è ')), int(input('–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –ø–æ–ª—è ')))
field.print_map()

field.Generate_forests(int(input("–°–∫–æ–ª—å–∫–æ % –ø–æ–ª—è –∑–∞–Ω–∏–º–∞–µ—Ç –ª–µ—Å? ")),100)
field.print_map()

print('–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ –≤–æ–¥–æ—ë–º—ã')
n = (int(input("–°–∫–æ–ª—å–∫–æ –Ω–∞ –ø–æ–ª–µ –≤–æ–¥–æ–µ–º–æ–≤? (—Ç–æ–ª—å–∫–æ > 0)")))
if n == 1:
    print('–ü–ª–æ—â–∞–¥—å –≤–æ–¥–æ—ë–º–∞ ')
    field.Generate_river(l = int(input()))
elif n == 2:
    print('–ü–ª–æ—â–∞–¥—å –≤–æ–¥–æ—ë–º–∞ ')
    field.Generate_river(l = int(input()))
    print('–ü–ª–æ—â–∞–¥—å –≤–æ–¥–æ—ë–º–∞ ')
    field.Generate_river(l = int(input()))
else:
    for i in range(n):
        while i < n-1:
            print('–ü–ª–æ—â–∞–¥—å –≤–æ–¥–æ—ë–º–∞ ')
            field.Generate_river(l = int(input()))
            i += 1
        
field.print_map()



print('–≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞ Y –∏ X')
field.cells[int(input("Y ="))-1][int(input("X ="))-1]= 8
field.print_map()

print('–≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Å–ø–∏—Ç–∞–ª—è Y –∏ X')
field.cells[int(input("Y ="))-1][int(input("X ="))-1]= 9
field.print_map()'''

